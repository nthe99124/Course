@using BlazorBootstrap
@using CourseProject.Model.ViewModel
@using CourseProject.Model.ViewModel.Account
@using Microsoft.JSInterop;
@using System.Net;
@using System.Text.Json
@inject NavigationManager _navigationManager;
@inject IJSRuntime _js;
@inject IConfiguration config;

@code {
    #region TODO: các hàm dùng chung cho các form từ js => nên tách ra dạng mixin
    protected async Task<string> GetSessionStorage(string key)
    {
        return await _js.InvokeAsync<string>("getSessionStorage", key);
    }

    protected async Task SetSessionStorage(string key, object value)
    {
        await _js.InvokeAsync<string>("setSessionStorage", key, value);
    }

    protected async Task RemoveSessionStorage(string key)
    {
        await _js.InvokeAsync<string>("removeSessionStorage", key);
    }

    protected async Task<UserInforGeneric> GetUserInfor()
    {
        var userInforJson = await GetSessionStorage("userInfor");
        if (!string.IsNullOrEmpty(userInforJson))
        {
            return JsonSerializer.Deserialize<UserInforGeneric>(userInforJson);
        }
        return null;
    }

    protected async Task ShowToast(string message, params object[] args)
    {
        await _js.InvokeVoidAsync("showToast", message, args);
    }

    protected async Task<T> InvokeAsync<T>(string method, params object[] args)
    {
        return await _js.InvokeAsync<T>(method, args);
    }
    protected async Task InvokeVoidAsync(string method, params object[] args)
    {
        await _js.InvokeVoidAsync(method, args);
    }

    protected void NavigateToUrl(string url)
    {
        _navigationManager.NavigateTo(url);
    }

    protected string GetLinkImage(string imgFileName)
    {
        var baseUrlApiImage = config.GetSection("BaseUrlApiImage").Value;
        return baseUrlApiImage + imgFileName;
    }

    protected async Task<FileBase64Infor> ConvertFileToBase64(IBrowserFile file)
    {
        using MemoryStream ms = new();
        await file.OpenReadStream().CopyToAsync(ms);
        var fileBytes = ms.ToArray();
        var fileInfor = new FileBase64Infor
        {
            Base64File = Convert.ToBase64String(fileBytes),
            ContentType = file.ContentType,
            FileName = file.Name
        };
        return fileInfor;
    }

    #region show toast
    protected ToastsPlacement toastsPlacement = ToastsPlacement.TopRight;
    protected List<ToastMessage> messages = new List<ToastMessage>();
    protected void ShowMessage(ToastType toastType, string message, ToastsPlacement placement = ToastsPlacement.TopRight, string title = null)
    {
        toastsPlacement = placement;
        if (string.IsNullOrEmpty(title))
        {
            switch (toastType)
            {
                case ToastType.Success:
                    title = "Thành công";
                    break;
                case ToastType.Info:
                    title = "Thông báo";
                    break;
                case ToastType.Danger:
                    title = "Lỗi";
                    break;
            }    
        }
        
        messages.Add(CreateToastMessage(toastType, message, title));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title = null)
    => new ToastMessage
        {
            Type = toastType,
            Title = title,
            // HelpText = $"{DateTime.Now}",
            Message = message,
        };
    #endregion
    #endregion
}