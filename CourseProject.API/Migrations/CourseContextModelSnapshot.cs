// <auto-generated />
using System;
using CourseProject.API.Common.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseProject.API.Migrations
{
    [DbContext(typeof(CourseContext))]
    partial class CourseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("ImgAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BenefitsOfCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("PriceAfterDiscount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("Teacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("TotalLectures")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalPerRating")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalTime")
                        .HasColumnType("bigint");

                    b.Property<short?>("TypeOfPurchase")
                        .HasColumnType("smallint");

                    b.Property<string>("VideoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.CourseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseAccounts");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.CourseTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TagId");

                    b.ToTable("CourseTag", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Lession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentsLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LessionLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lession", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.RoleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAccount", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Chapter", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Chapter_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Course", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Account", "CreatedByNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Course_Accounts");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.CourseAccount", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Account", "Account")
                        .WithMany("CourseAccountAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseProject.Model.BaseEntity.Course", "Course")
                        .WithMany("CourseAccountCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.CourseTag", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Course", "Course")
                        .WithMany("CourseTags")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseTag_Course");

                    b.HasOne("CourseProject.Model.BaseEntity.Tag", "Tag")
                        .WithMany("CourseTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_CourseTag_Tag");

                    b.Navigation("Course");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Lession", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Chapter", "Chapter")
                        .WithMany("Lessions")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK_Lession_Chapter");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.RoleAccount", b =>
                {
                    b.HasOne("CourseProject.Model.BaseEntity.Account", "Account")
                        .WithMany("RoleAccountAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleAccount_Accounts");

                    b.HasOne("CourseProject.Model.BaseEntity.Account", "CreatedByNavigation")
                        .WithMany("RoleAccountCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_RoleAccountant_Accounts1");

                    b.HasOne("CourseProject.Model.BaseEntity.Role", "Role")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleAccountant_Role");

                    b.Navigation("Account");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Account", b =>
                {
                    b.Navigation("CourseAccountAccounts");

                    b.Navigation("Courses");

                    b.Navigation("RoleAccountAccounts");

                    b.Navigation("RoleAccountCreatedByNavigations");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Chapter", b =>
                {
                    b.Navigation("Lessions");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("CourseAccountCourses");

                    b.Navigation("CourseTags");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Role", b =>
                {
                    b.Navigation("RoleAccounts");
                });

            modelBuilder.Entity("CourseProject.Model.BaseEntity.Tag", b =>
                {
                    b.Navigation("CourseTags");
                });
#pragma warning restore 612, 618
        }
    }
}
